# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  name: 'Default'

jobs:
- job: BuildAndTest
  steps:
  - task: Maven@4
    inputs:
      jdkDirectory: jdk21
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.21'
      jdkArchitectureOption: 'x64'  # Changed from x64 to ARM64
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'package'

  # Save the JAR file as an artifact
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/target'
      ArtifactName: 'financial-planner-backend-target'
      publishLocation: 'Container'
- job: PushChangesToGitHub
  steps:
  - checkout: self
  - script: |
      git pull origin master
      git checkout master
      git config user.name "Gabriel"
      git config user.email "gmmoreira.can@gmail.com"
      # Set your remote name and URL
      REMOTE_NAME="github"
      REMOTE_URL="https://${GITHUB_TOKEN}:gmmoreiracan@github.com/gmmoreiracan/financial-planner-backend.git"

      # Check if the remote already exists
      if git remote get-url $REMOTE_NAME &> /dev/null; then
          echo "Remote '$REMOTE_NAME' already exists."
      else
          echo "Adding remote '$REMOTE_NAME'."
          git remote add $REMOTE_NAME $REMOTE_URL
      fi

      # Check if we are on a branch
      CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

      if [ "$CURRENT_BRANCH" == "HEAD" ]; then
          echo "We are in a detached HEAD state. Checking out to master."
          git checkout master  # Replace with your desired branch
      fi

      # Attempt to pull changes from the remote repository
      git pull github master --rebase || {
          echo "Failed to pull changes. Please check for divergence."
          exit 1
      }

      git add .
      git commit -m "Automated sync from Azure Pipeline" || echo "No changes to commit"
      git push github master
    displayName: 'Sync Changes to GitHub'
  
- job: DeployToHeroku
  displayName: 'Deploy to Heroku'
  dependsOn: BuildAndTest
  condition: succeeded()

  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        # Check if Heroku CLI is installed
        if ! command -v heroku &> /dev/null
        then
            echo "Heroku CLI not found, installing..."
            
            # Install Heroku CLI based on the OS
            if [[ "$OSTYPE" == "linux-gnu"* ]]; then
                curl https://cli-assets.heroku.com/install.sh | sh
            elif [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS installation (Homebrew)
                brew tap heroku/brew && brew install heroku
            else
                echo "Unsupported OS for automatic Heroku installation"
                exit 1
            fi
        else
            echo "Heroku CLI already installed."
        fi

        # Check if already logged in
        if ! heroku auth:whoami &> /dev/null
        then
            echo "Not logged in, logging in..."
            heroku auth:token
        else
            echo "Already logged in to Heroku."
        fi

        heroku config:set JWT_SECRET=${JWT_SECRET} \
                       SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD} \
                       SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL} \
                       SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME} \
                       --app ${HEROKU_APP_NAME}
    displayName: 'Install and Authenticate Heroku CLI'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'financial-planner-backend-target'
      targetPath: '$(Pipeline.Workspace)/target'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        heroku deploy:jar --jar '$(Pipeline.Workspace)/target/financial-planner-backend-0.0.1-SNAPSHOT.jar' --jdk-21 --app ${HEROKU_APP_NAME}
    displayName: 'Deploy JAR to Heroku'
